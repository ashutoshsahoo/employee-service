/*
 * Test cases generated by Diffblue plugin
 */
package com.ashu.practice.service;

import com.ashu.practice.dto.CreateEmployeeRequest;
import com.ashu.practice.dto.EmployeeDto;
import com.ashu.practice.dto.EmployeeSearchRequest;
import com.ashu.practice.dto.UpdateEmployeeRequest;
import com.ashu.practice.exception.EmployeeNotFoundException;
import com.ashu.practice.model.Employee;
import com.ashu.practice.repository.EmployeeRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ContextConfiguration(classes = {EmployeeServiceImpl.class})
@ExtendWith(SpringExtension.class)
class EmployeeServiceImplTest {
    @MockBean
    private EmployeeRepository employeeRepository;

    @Autowired
    private EmployeeServiceImpl employeeServiceImpl;

    @Test
    void testCreate() {
        Employee employee = new Employee();
        employee.setDepartment("Department");
        employee.setDesignation("Designation");
        employee.setId(123L);
        employee.setName("Name");
        employee.setPhone("4105551212");
        employee.setAddress("42 Main St");
        when(this.employeeRepository.saveAndFlush((Employee) any())).thenReturn(employee);

        CreateEmployeeRequest createEmployeeRequest = new CreateEmployeeRequest();
        createEmployeeRequest.setDesignation("Designation");
        createEmployeeRequest.setDepartment("Department");
        createEmployeeRequest.setName("Name");
        EmployeeDto actualCreateResult = this.employeeServiceImpl.create(createEmployeeRequest);
        assertEquals("42 Main St", actualCreateResult.getAddress());
        assertEquals("4105551212", actualCreateResult.getPhone());
        assertEquals("Name", actualCreateResult.getName());
        assertEquals(123L, actualCreateResult.getId().longValue());
        assertEquals("Designation", actualCreateResult.getDesignation());
        assertEquals("Department", actualCreateResult.getDepartment());
        verify(this.employeeRepository).saveAndFlush((Employee) any());
        assertTrue(this.employeeServiceImpl.getAll().isEmpty());
    }

    @Test
    void testViewById() {
        Employee employee = new Employee();
        employee.setDepartment("Department");
        employee.setDesignation("Designation");
        employee.setId(123L);
        employee.setName("Name");
        employee.setPhone("4105551212");
        employee.setAddress("42 Main St");
        Optional<Employee> ofResult = Optional.<Employee>of(employee);
        when(this.employeeRepository.findById((Long) any())).thenReturn(ofResult);
        EmployeeDto actualViewByIdResult = this.employeeServiceImpl.viewById(123L);
        assertEquals("42 Main St", actualViewByIdResult.getAddress());
        assertEquals("4105551212", actualViewByIdResult.getPhone());
        assertEquals("Name", actualViewByIdResult.getName());
        assertEquals(123L, actualViewByIdResult.getId().longValue());
        assertEquals("Designation", actualViewByIdResult.getDesignation());
        assertEquals("Department", actualViewByIdResult.getDepartment());
        verify(this.employeeRepository).findById((Long) any());
        assertTrue(this.employeeServiceImpl.getAll().isEmpty());
    }

    @Test
    void testViewById2() {
        when(this.employeeRepository.findById((Long) any())).thenReturn(Optional.<Employee>empty());
        assertThrows(EmployeeNotFoundException.class, () -> this.employeeServiceImpl.viewById(123L));
        verify(this.employeeRepository).findById((Long) any());
    }

    @Test
    void testGetAll() {
        when(this.employeeRepository.findAll()).thenReturn(new ArrayList<Employee>());
        assertTrue(this.employeeServiceImpl.getAll().isEmpty());
        verify(this.employeeRepository).findAll();
    }

    @Test
    void testGetAll2() {
        Employee employee = new Employee();
        employee.setDepartment("Department");
        employee.setDesignation("Designation");
        employee.setId(123L);
        employee.setName("Name");
        employee.setPhone("4105551212");
        employee.setAddress("42 Main St");

        ArrayList<Employee> employeeList = new ArrayList<Employee>();
        employeeList.add(employee);
        when(this.employeeRepository.findAll()).thenReturn(employeeList);
        assertEquals(1, this.employeeServiceImpl.getAll().size());
        verify(this.employeeRepository).findAll();
    }

    @Test
    void testGetAll3() {
        Employee employee = new Employee();
        employee.setDepartment("Department");
        employee.setDesignation("Designation");
        employee.setId(123L);
        employee.setName("Name");
        employee.setPhone("4105551212");
        employee.setAddress("42 Main St");

        Employee employee1 = new Employee();
        employee1.setDepartment("Department");
        employee1.setDesignation("Designation");
        employee1.setId(123L);
        employee1.setName("Name");
        employee1.setPhone("4105551212");
        employee1.setAddress("42 Main St");

        ArrayList<Employee> employeeList = new ArrayList<Employee>();
        employeeList.add(employee1);
        employeeList.add(employee);
        when(this.employeeRepository.findAll()).thenReturn(employeeList);
        assertEquals(2, this.employeeServiceImpl.getAll().size());
        verify(this.employeeRepository).findAll();
    }

    @Test
    void testUpdate() {
        Employee employee = new Employee();
        employee.setDepartment("Department");
        employee.setDesignation("Designation");
        employee.setId(123L);
        employee.setName("Name");
        employee.setPhone("4105551212");
        employee.setAddress("42 Main St");
        Optional<Employee> ofResult = Optional.<Employee>of(employee);

        Employee employee1 = new Employee();
        employee1.setDepartment("Department");
        employee1.setDesignation("Designation");
        employee1.setId(123L);
        employee1.setName("Name");
        employee1.setPhone("4105551212");
        employee1.setAddress("42 Main St");
        when(this.employeeRepository.save((Employee) any())).thenReturn(employee1);
        when(this.employeeRepository.findById((Long) any())).thenReturn(ofResult);

        UpdateEmployeeRequest updateEmployeeRequest = new UpdateEmployeeRequest();
        updateEmployeeRequest.setDesignation("Designation");
        updateEmployeeRequest.setDepartment("Department");
        updateEmployeeRequest.setPhone("4105551212");
        updateEmployeeRequest.setName("Name");
        updateEmployeeRequest.setAddress("42 Main St");
        EmployeeDto actualUpdateResult = this.employeeServiceImpl.update(123L, updateEmployeeRequest);
        assertEquals("42 Main St", actualUpdateResult.getAddress());
        assertEquals("4105551212", actualUpdateResult.getPhone());
        assertEquals("Name", actualUpdateResult.getName());
        assertEquals(123L, actualUpdateResult.getId().longValue());
        assertEquals("Designation", actualUpdateResult.getDesignation());
        assertEquals("Department", actualUpdateResult.getDepartment());
        verify(this.employeeRepository).findById((Long) any());
        verify(this.employeeRepository).save((Employee) any());
        assertTrue(this.employeeServiceImpl.getAll().isEmpty());
    }

    @Test
    void testUpdate2() {
        Employee employee = new Employee();
        employee.setDepartment("Department");
        employee.setDesignation("Designation");
        employee.setId(123L);
        employee.setName("Name");
        employee.setPhone("4105551212");
        employee.setAddress("42 Main St");
        when(this.employeeRepository.save((Employee) any())).thenReturn(employee);
        when(this.employeeRepository.findById((Long) any())).thenReturn(Optional.<Employee>empty());

        UpdateEmployeeRequest updateEmployeeRequest = new UpdateEmployeeRequest();
        updateEmployeeRequest.setDesignation("Designation");
        updateEmployeeRequest.setDepartment("Department");
        updateEmployeeRequest.setPhone("4105551212");
        updateEmployeeRequest.setName("Name");
        updateEmployeeRequest.setAddress("42 Main St");
        assertThrows(EmployeeNotFoundException.class, () -> this.employeeServiceImpl.update(123L, updateEmployeeRequest));
        verify(this.employeeRepository).findById((Long) any());
    }

    @Test
    void testDelete() {
        Employee employee = new Employee();
        employee.setDepartment("Department");
        employee.setDesignation("Designation");
        employee.setId(123L);
        employee.setName("Name");
        employee.setPhone("4105551212");
        employee.setAddress("42 Main St");
        Optional<Employee> ofResult = Optional.<Employee>of(employee);
        doNothing().when(this.employeeRepository).delete((Employee) any());
        when(this.employeeRepository.findById((Long) any())).thenReturn(ofResult);
        this.employeeServiceImpl.delete(123L);
        verify(this.employeeRepository).delete((Employee) any());
        verify(this.employeeRepository).findById((Long) any());
        assertTrue(this.employeeServiceImpl.getAll().isEmpty());
    }

    @Test
    void testDelete2() {
        doNothing().when(this.employeeRepository).delete((Employee) any());
        when(this.employeeRepository.findById((Long) any())).thenReturn(Optional.<Employee>empty());
        assertThrows(EmployeeNotFoundException.class, () -> this.employeeServiceImpl.delete(123L));
        verify(this.employeeRepository).findById((Long) any());
    }

    @Test
    void testSearch() {
        when(this.employeeRepository.findAll((org.springframework.data.domain.Example<Employee>) any()))
                .thenReturn(new ArrayList<Employee>());

        EmployeeSearchRequest employeeSearchRequest = new EmployeeSearchRequest();
        employeeSearchRequest.setDesignation("Designation");
        employeeSearchRequest.setDepartment("Department");
        employeeSearchRequest.setName("Name");
        List<EmployeeDto> actualSearchResult = this.employeeServiceImpl.search(employeeSearchRequest);
        assertTrue(actualSearchResult.isEmpty());
        verify(this.employeeRepository).findAll((org.springframework.data.domain.Example<Employee>) any());
        assertEquals(actualSearchResult, this.employeeServiceImpl.getAll());
    }

    @Test
    void testSearch2() {
        Employee employee = new Employee();
        employee.setDepartment("name");
        employee.setDesignation("name");
        employee.setId(123L);
        employee.setName("name");
        employee.setPhone("4105551212");
        employee.setAddress("42 Main St");

        ArrayList<Employee> employeeList = new ArrayList<Employee>();
        employeeList.add(employee);
        when(this.employeeRepository.findAll((org.springframework.data.domain.Example<Employee>) any()))
                .thenReturn(employeeList);

        EmployeeSearchRequest employeeSearchRequest = new EmployeeSearchRequest();
        employeeSearchRequest.setDesignation("Designation");
        employeeSearchRequest.setDepartment("Department");
        employeeSearchRequest.setName("Name");
        assertEquals(1, this.employeeServiceImpl.search(employeeSearchRequest).size());
        verify(this.employeeRepository).findAll((org.springframework.data.domain.Example<Employee>) any());
        assertTrue(this.employeeServiceImpl.getAll().isEmpty());
    }

    @Test
    void testSearch3() {
        Employee employee = new Employee();
        employee.setDepartment("name");
        employee.setDesignation("name");
        employee.setId(123L);
        employee.setName("name");
        employee.setPhone("4105551212");
        employee.setAddress("42 Main St");

        Employee employee1 = new Employee();
        employee1.setDepartment("name");
        employee1.setDesignation("name");
        employee1.setId(123L);
        employee1.setName("name");
        employee1.setPhone("4105551212");
        employee1.setAddress("42 Main St");

        ArrayList<Employee> employeeList = new ArrayList<Employee>();
        employeeList.add(employee1);
        employeeList.add(employee);
        when(this.employeeRepository.findAll((org.springframework.data.domain.Example<Employee>) any()))
                .thenReturn(employeeList);

        EmployeeSearchRequest employeeSearchRequest = new EmployeeSearchRequest();
        employeeSearchRequest.setDesignation("Designation");
        employeeSearchRequest.setDepartment("Department");
        employeeSearchRequest.setName("Name");
        assertEquals(2, this.employeeServiceImpl.search(employeeSearchRequest).size());
        verify(this.employeeRepository).findAll((org.springframework.data.domain.Example<Employee>) any());
        assertTrue(this.employeeServiceImpl.getAll().isEmpty());
    }
}

